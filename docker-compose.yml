version: "1.0"

services:
  migrations:
    image: gfndev/wordletg:latest
    build:
      .
    restart: no
    env_file:
      - ".env"
    environment:
      DB_HOST: database
    entrypoint: ["alembic", "upgrade", "head"]
    depends_on:
      database:
        condition: service_healthy
    networks:
      - apinet
  natsmailer:
    container_name: "natsmailer"
    image: gfndev/wordletg:latest
    build:
      context: .
    stop_signal: SIGINT
    entrypoint: python -m src.mailing_nats
    links:
      - nats
    environment:
      NATS_HOST: nats
    depends_on:
      nats:
        condition: service_started
    networks:
      - apinet
  tgbot:
    container_name: "tgbot"
    image: gfndev/wordletg:latest
    build:
      context: .
    stop_signal: SIGINT
    entrypoint: python -m src.tgbot
    restart: unless-stopped
    env_file:
      - ".env"
    links:
      - redis
      - nats
    environment:
      DB_HOST: database
      REDIS_HOST: redis
      NATS_HOST: nats
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      nats:
        condition: service_started
    networks:
      - apinet
  database:
    image: postgres:14-alpine
    ports:
      - "127.0.0.1:5433:5432"
    restart: unless-stopped
    volumes:
      - pg_data:/var/lib/postgresql/data
    env_file:
      - ".env"
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASS
      POSTGRES_DB: $DB_NAME
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    healthcheck:
      test: "pg_isready -d ${DB_NAME} -U ${DB_USER}"
      interval: 3s
      retries: 5
      timeout: 15s
    networks:
      - apinet
  redis:
    container_name: "wordletgredis"
    image: redis:7-alpine
    command: "redis-server --requirepass ${REDIS_PASSWORD} --port ${REDIS_PORT}"
    restart: always
    healthcheck:
      test: "[ $$(redis-cli -h redis -p ${REDIS_PORT} -a ${REDIS_PASSWORD} ping) = 'PONG' ] || exit 1"
      interval: 3s
      retries: 5
      timeout: 15s
    env_file:
      - .env
    ports:
      - "127.0.0.1:${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    networks:
      - apinet
  nats:
    container_name: "natstg"
    image: nats
    command: "-js -c server.conf"
    restart: always
    networks:
      - apinet
    volumes:
      - nats-data:/natsdata
      - ./server.conf:/server.conf


volumes:
  pg_data: {}
  redis-data: {}
  nats-data: {}

networks:
  apinet:
    driver: bridge